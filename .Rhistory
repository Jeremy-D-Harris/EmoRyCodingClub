ls2_df <- ls2 %>%
data.frame
ls2
ls2_df <- ls1 %>%
data.frame
names(ls1_df) <- c("A","B","C")
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B))
ls2p <- ggplot(ls2_df)+geom_point(aes(A,C))
ls2p
names(ls1_df) <- c("A","B","C")
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B))
ls1p
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C))
ls2p
map(c(ls1p,ls2p),grid.arrange)
ls2p
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C))
ls2p
plotfunc <- ggplot() + geom_point() + theme_minmal()
plotfunc <- ggplot() + geom_point() + theme_minimal()
ls1_df <- ls1 %>%
data.frame
names(ls1_df) <- c("A","B","C")
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B))
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C))
ls1p
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B)) + theme_minimal()
ls2p
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B)) + theme_minimal()
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C)) + theme_minimal()
ls2p
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A)) + theme_minimal()
ls2p
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
ls2p
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=C,size=A),show.legend = F) + theme_minimal()
ls2p
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
plot_list <- list(ls2p)
plot_list
plot_list <- list(ls1p,ls2p)
pluck(plot_list,2)
pluck(plot_list,1)
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B,color="orange")) + theme_minimal()
plot_list <- list(ls1p,ls2p)
pluck(plot_list,1)
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B),color="orange") + theme_minimal()
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
pluck(plot_list,1)
names(ls1_df) <- c("A","B","C")
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B,color="orange"),show.legend = F) + theme_minimal()
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
plot_list <- list(ls1p,ls2p)
pluck(plot_list,1)
map(plot_list,1)
map(plot_list,1)
pluck(plot_list,1)
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B,color="orange",size=A),show.legend = F) + theme_minimal()
ls1p
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B,color="blue",size=A),show.legend = F) + theme_minimal()
ls1p
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B,size=A),color="blue",show.legend = F) + theme_minimal()
ls1p
names(ls1_df) <- c("A","B","C")
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B,size=A),color="orange",show.legend = F) + theme_minimal()
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
# store in list
plot_list <- list(ls1p,ls2p)
# pluck individual plots from list
pluck(plot_list,1)
ls1p <- ggplot(ls1_df)+geom_point(aes(A,B,size=A),color="orange",show.legend = F) + theme_minimal() + geom_line()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A),color="orange",show.legend = F)+geom_point() + theme_minimal() + geom_line()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + theme_minimal() + geom_line()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A),color="orange",show.legend = F)+geom_point(color="orange",show.legend = F) + theme_minimal() + geom_line()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point() + theme_minimal() + geom_line()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A,color="orange",show.legend = F))+geom_point() + theme_minimal() + geom_line()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A),color="orange",show.legend = F)+geom_point() + geom_line() + theme_minimal()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + theme_minimal()
ls1p
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
plot_list <- list(ls1p,ls2p)
pluck(plot_list,1)
set.seed(10)
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + labs(main="Access plots as list indices") + theme_minimal()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + labs(main="Access plots as list indices") + theme_calc()
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + labs(main="Access plots as list indices") + theme_get()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + labs(title="Access plots as list indices") + theme_classic()
ls1p
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + labs(title="Access plots as list indices") + theme_minimal()
pluck(ls1,3) # advantage = returns numeric
ls1[3][[1]] # this is the same as above
keep(ls2, is.na)
keep(ls1, is.na)
discard(ls1, is.na)
ls1
compact(ls1)
ls1
compact(ls1)
ls1
?compact
compact(ls1,mean)
ls1
compact(ls1,mean)
compact(ls1)
ls1
ls1_0 <- append(ls1,0)
ls1_0
ls1_0 <- append(ls1[[3]],0)
ls1_0
ls1
append(ls1[[3]],0)
ls1
ls1 %>% every(is.character)
ls1 %>% some(is.character)
ls1 %>% has_element("foo")
ls1 %>% detect(is.character)
ls1 %>% detect_index(is.character)
ls1 %>% vec_depth
ls1 %>% vec_depth
pluck(plot_list,1)
plot_list <- list(ls1p,ls2p)
ls2
map2(ls2,ls1,mean)
?map2
map2(ls2,ls1,mean)
map2(ls1,ls1,mean)
ls1
map(ls1,ls1,mean)
ls1
ls1
map(ls1,mean)
map2(ls1,mean)
map2(ls1,ls1,mean)
map2(ls1,ls1,sum)
map2(ls1,ls1,length)
map2(ls1,ls1,lengths)
mean(ls1)
append(ls1,list(d=0))
append(ls1,0)
ls1
ls2 <- append(ls1,0)
compact(ls2)
ls2 <- append(ls1,0)
compact(ls2)
ls2 <- append(ls1,NULL)
compact(ls2)
ls2
ls2 <- append(ls1,NA)
ls2
compact(ls2)
ls2 <- list(NA,NULL,integer(0))
ls2
compact(ls2)
ls2 <- list(1,NA,NULL,integer(0),list())
ls2
compact(ls2)
discard(ls1, is.na)
keep(ls1, mean)
keep(ls1, map(ls1,mean)>4)
keep(ls1, map(ls1,mean)>10)
func
func <- map(ls1,mean) > 10
func
keep(ls1, func)
func <- map(ls1,mean) > 10 # create a logical test (a predicate function)
keep(ls1, func)
discard(ls1, func)
keep(ls1, func)
discard(ls1, func)
ls2 <- list(1,NA,NULL,integer(0),list())
compact(ls2)
head_while(ls1)
head_while(ls1,mean)
head_while(ls1,sum)
head_while(ls1,sum<10)
keep(ls1,sum<10)
?head_while
head_while(ls1,func)
func
head_while(1:50,func)
func
1634.94-790.47
1634.94/2
1634.94-790.47 - 1634.94/2
1634.94-790.47 - (1634.94/2)
1634.94/2
1634.94/2 - 790.47
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
ls1
modify_depth(ls1,3,mean)
modify_depth(ls1,1,mean)
modify_depth(ls1,2,mean)
replicate(ls1,ls1)
replicate(ls1,2)
?replicate
rep(ls1,list) %>% pmap(ls1)
rep(ls1) %>% pmap(ls1)
rep(ls1,10) %>% pmap(ls1)
rep(ls1,10) %>% pmap(ls1,10)
c(ls1,ls1)
c(ls1,list(ls1))
list(ls1)
ls1_2 <- list(ls1)
modify_depth(ls1_2,2,mean)
modify_depth(ls1_2,1,mean)
modify_depth(ls1_2,3,mean)
modify_depth(ls1_2,4,mean)
ls1_2 <- list(ls1,list(ls1))
modify_depth(ls1_2,4,mean)
modify_depth(ls1_2,3,mean)
modify_depth(ls1_2,2,mean)
list(ls1,ls1)
ls2
ls1_repeat <- list(ls1,ls1)
modify_depth(ls1_repeat,2,mean)
modify_depth(ls1_repeat,1,mean)
modify_depth(ls1_repeat,3,mean)
ls1_repeat <- append(ls1,ls1)
ls1_repeat
modify_depth(ls1_repeat,3,mean)
ls1_repeat <- purrr::append(ls1,ls1)
ls1_repeat <- list(list(ls1,ls1))
ls1_repeat
modify_depth(ls1_repeat,3,mean)
modify_depth(ls1_repeat,2,mean)
ls1_repeat <- list(ls1,list(ls1,ls1))
)
ls1_repeat <- c(ls1,list(ls1,ls1))
ls1_repeat
modify_depth(ls1_repeat,2,mean)
ls1_repeat <- list(ls1,ls1,ls1))
ls1_repeat <- list(ls1,ls1,ls1)
modify_depth(ls1_repeat,2,mean)
modify_depth(ls1_repeat,1,mean)
modify_depth(ls1_repeat,3,mean)
ls1_repeat
ls1_repeat <- list(ls1,list(ls1),list(ls1))
ls1_repeat
modify_depth(ls1_repeat,3,mean)
ls1_repeat <- list(list(list(ls1)))
ls1_repeat
ls1_repeat %>% map(mean)
ls1_repeat %>% map_at(mean,2)
ls1_repeat %>% map_at(mean,3)
ls1_repeat %>% map_at(mean,4)
ls1_repeat %>% map_at(mean,5)
ls1_repeat %>% modify_at(mean,5)
ls1_repeat
ls1_repeat %>% modify_at(mean,2)
ls1_repeat %>% modify_depth(mean,2)
ls1_repeat %>% modify_depth(mean,1)
ls1_repeat <- list(list(list(ls1)))
ls1_repeat %>% modify_depth(1,mean)
ls1_repeat %>% map(mean)
ls1_repeat %>% map(mean,1)
ls1_repeat %>% map(mean,2)
ls1_repeat %>% map(mean,3)
ls1_repeat %>% modify_depth(2,mean)
ls1_repeat %>% modify_depth(3,mean)
ls1_repeat %>% modify_depth(4,mean)
ls1_repeat
ls1_repeat %>% modify_depth(4,mean) %>% unlist %>% data.frame %>%
ggplot() + geom_histogram(aes(.),binwidth=0.5)+theme_classic()
ls1_repeat %>% modify_depth(4,mean) %>% unlist %>% data.frame
ls1_repeat %>% modify_depth(4,mean) %>% unlist %>% data.frame %>%
ggplot() + geom_point(aes(.),binwidth=0.5)+theme_classic()
ls1_repeat %>% modify_depth(4,mean) %>% unlist %>% data.frame %>%
ggplot() + geom_point(aes(.,.),binwidth=0.5)+theme_classic()
ls1_repeat %>% modify_depth(4,mean) %>% unlist %>% data.frame %>%
ggplot() + geom_point(aes(.,1:length(ls1_repeat)),binwidth=0.5)+theme_classic()
ls1_repeat %>% modify_depth(4,mean) %>% unlist %>% data.frame %>%
ggplot() + geom_histogram(aes(.))
ls1_repeat %>% modify_depth(4,mean)
ls1_repeat <- list(list(list(ls1))) # create list of lists
ls1_repeat
ls1_repeat
ls1_repeat %>% map(mean,3) # list is indexed too far down
ls1_repeat %>% map(mean,4) # list is indexed too far down
ls1_repeat %>% map(mean,5) # list is indexed too far down
ls1_repeat %>% map(mean) # list is indexed too far down
ls1_repeat <- list(list(list(ls1))) # create list of lists
ls1_repeat %>% modify_depth(2,unlist)
ls1_repeat %>% modify_depth(1,unlist)
ls1_repeat %>% modify_depth(3,unlist)
ls1_repeat %>% modify_depth(4,unlist)
ls1_repeat %>% modify_depth(4,unlist) %>% glimpse
ls1_repeat %>% map(mean) # list is indexed too far down
ls1_repeat %>% modify_depth(4,mean) # access deep list indices
ls1_repeat %>% modify_depth(4,unlist) %>% glimpse
ls1_repeat %>% modify_depth(4,unlist)
ls1_repeat %>% modify_depth(2,unlist)
ls1_repeat %>% modify_depth(2,unlist) %>% map(mean)
require(ggthemes,ggplot2,readr)
# smaller csv file (16 cols)
url <- "http://data.insideairbnb.com/united-states/ny/new-york-city/2019-06-02/visualisations/listings.csv"
nyc <-  read_csv(url)
nyc <- nyc[nyc$id < 1000000,] # get smaller subet of data
colv = "#00060a"
ggplot(data = nyc, mapping = aes(x = reviews_per_month,y = number_of_reviews)) +
geom_point(aes(color=neighbourhood_group),show.legend = T,alpha=0.5) +
geom_smooth(color = colv, fill = colv, method="loess",alpha=0.3) +
labs(title = "Reviews across NYC boroughs",
caption = "Source: NYC Airbnb data",
x = "Reviews per month",
y =  "Number of reviews",
colour = "Boroughs") +
theme_classic()
ggplot(data = nyc, aes(x = reviews_per_month,y = number_of_reviews)) +
geom_point(aes(color=neighbourhood_group),show.legend = T,alpha=0.5) +
geom_smooth(color = colv, fill = colv, method="loess",alpha=0.3) +
labs(title = "Reviews across NYC boroughs",
caption = "Source: NYC Airbnb data",
x = "Reviews per month",
y =  "Number of reviews",
colour = "Boroughs") +
theme_classic()
ggplot(data = nyc, aes(x = reviews_per_month,y = number_of_reviews)) +
geom_point(aes(color=neighbourhood_group),show.legend = T,alpha=0.5) +
geom_smooth(color = colv, fill = colv, method="loess",alpha=0.3)
ggplot(data = nyc, aes(x = reviews_per_month,y = number_of_reviews)) +
geom_point(aes(color=neighbourhood_group),show.legend = T,alpha=0.5) +
geom_smooth(color = colv, fill = colv, method="loess",alpha=0.3) +
labs(title = "Reviews across NYC boroughs",
caption = "Source: NYC Airbnb data",
x = "Reviews per month",
y =  "Number of reviews"
)
ggplot(data = nyc, aes(x = reviews_per_month,y = number_of_reviews)) +
geom_point(aes(color=neighbourhood_group),show.legend = T,alpha=0.5) +
geom_smooth(color = colv, fill = colv, method="loess",alpha=0.3) +
labs(title = "Reviews across NYC boroughs",
caption = "Source: NYC Airbnb data",
x = "Reviews per month",
y =  "Number of reviews",
colour = "Boroughs")
ggplot(data = nyc, aes(x = reviews_per_month,y = number_of_reviews)) +
geom_point(aes(color=neighbourhood_group),show.legend = T,alpha=0.5) +
geom_smooth(color = colv, fill = colv, method="loess",alpha=0.3) +
labs(title = "Reviews across NYC boroughs",
caption = "Source: NYC Airbnb data",
x = "Reviews per month",
y =  "Number of reviews",
colour = "Boroughs") +
theme_classic()
mean(ls1)
sum(ls1)
s1 <- sample(10) # random number sample
s2 <- rnorm(10,500) # sample 10 normally distributed random numbers around a mean of 500
s3 <- runif(10) # random uniform distribution
s1
s2
ls1 <- list(s1,s2,s3) # create a list of these data
ls1
ls1 %>% str
set.seed(12) # set a number seed to generate reprodicible results for random data
map(ls1,mean)  # get the mean
mean(ls1)
sum(ls1)
ls1_df <- ls1 %>%
data.frame
names(ls1_df) <- c("A","B","C")
ls1_repeat <- list(list(list(ls1))) # create list of lists
ls1_repeat %>% map(mean) # list is indexed too far down
ls1_repeat
s1 <- sample(300) # random number sample
s2 <- rnorm(10,500) # sample 10 normally distributed random numbers around a mean of 500
s3 <- LETTERS() # random uniform distribution
s1
s1
s2
s3 <- LETTERS(1:13) # random uniform distribution
s1 <- sample(300) # random number sample
s2 <- rnorm(10,500) # sample 10 normally distributed random numbers around a mean of 500
s3 <- LETTERS[1:13]
s1
s1
s2
s2
s3
ls1 <- list(s1,s2,s3) # create a list of these data
ls1
ls1 %>% str
s1
ls1 %>% map(mean)
ls1 %>% map_chr(mean)
set.seed(10)
ls1_df <- ls1 %>%
data.frame
ls1_df <- ls1 %>%
data.frame
s1 <- sample(10) # random number sample
s2 <- rnorm(10,500) # sample 10 normally distributed random numbers around a mean of 500
s3 <- runif[10] # random uniform distribution
s3 <- runif(10) # random uniform distribution
ls1 <- list(s1,s2,s3) # create a list of these data
ls1 %>% str
ls1_df <- ls1 %>%
data.frame
names(ls1_df) <- c("A","B","C")
set.seed(10)
ls1_df <- ls1 %>%
data.frame
# create some plots
names(ls1_df) <- c("A","B","C")
ls1p <- ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + labs(title="Access plots as list indices") + theme_minimal()
ls2p <- ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
plot_list <- list(ls1p,ls2p)
ggplot(ls1_df,aes(A,B,size=A))+geom_point(color="orange",show.legend = F) + geom_line(color="orange",show.legend = F) + labs(title="Access plots as list indices") + theme_minimal()
ggplot(ls1_df)+geom_point(aes(A,C,color=A,size=A),show.legend = F) + theme_minimal()
plot_list <- list(ls1p,ls2p)
pluck(plot_list,1)
pluck(plot_list,2)
names(plot_list) <- c("Plot1","Plot2")
pluck(plot_list,"Plot1")
pluck(plot_list,"Plot2")
plot_list
require(leaflet)
latlon <- c(33.79667, -84.32346) # emory
ecc_label <- "Room 2052, Wayne Rollins Building"
ecc_popup <- "Take the elevator to the second floor, \nthen exit left and take the first left."
map <- leaflet() # initiate the leaflet map object
map <- addTiles(map) # add the actual map tiles to the leaflet object
map <- addMarkers(map,latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map
require(leaflet)
latlon <- c(33.79667, -84.32346) # emory
ecc_label <- "Room 2052, Wayne Rollins Building"
ecc_popup <- "Take the elevator to the second floor, \nthen exit left and take the first left."
map <- leaflet() # initiate the leaflet map object
map <- addTiles(map) # add the actual map tiles to the leaflet object
map <- addMarkers(map,latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map
require(dplyr)
custom_tile <- "http://a.sm.mapstack.stamen.com/(positron,(mapbox-water,$776699[hsl-color]),(buildings,$002bff[hsl-color]),(parks,$6abb9d[hsl-color]))/{z}/{x}/{y}.png"
custom_tile <- "http://a.sm.mapstack.stamen.com/(positron,(mapbox-water,$776699[hsl-color]),(buildings,$002bff[hsl-color]),(parks,$6abb9d[hsl-color]))/{z}/{x}/{y}.png"
map <- leaflet() # initiate the leaflet map object
map <- addTiles(map) # add the actual map tiles to the leaflet object
map <- addMarkers(map,latlon[2],latlon[1],label=ecc_label,popup=ecc_popup) %>%
addProviderTiles(custom_tile)
map
map <- leaflet() %>%  # initiate the leaflet map object
addTiles(custom_tile) %>%  # add the actual map tiles to the leaflet object
addMarkers(map,latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=10) %>%
addTiles(custom_tile) %>%  # add the actual map tiles to the leaflet object
addMarkers(map,latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=10) %>%
addTiles(custom_tile) %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=10) %>%
addTiles("Toner") %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=10) %>%
addTiles("Stamen.Toner") %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup)
map
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=10) %>%
addTiles() %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup) %>%
addProviderTiles("Stamen.Toner")
map
names(providers)[37]
names(providers)
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=10) %>%
addTiles() %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup) %>%
addProviderTiles("Stamen.TonerLite")
map
names(providers)
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=10) %>%
addTiles() %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup) %>%
addProviderTiles("CartoDB.Positron")
map
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=13) %>%
addTiles() %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup) %>%
addProviderTiles("CartoDB.Positron")
map
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=15) %>%
addTiles() %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup) %>%
addProviderTiles("CartoDB.Positron")
map
map <- leaflet() %>%  # initiate the leaflet map object
setView(latlon[2],latlon[1],zoom=15) %>%
addTiles() %>%  # add the actual map tiles to the leaflet object
addMarkers(latlon[2],latlon[1],label=ecc_label,popup=ecc_popup) %>%
addProviderTiles("CartoDB.Positron")
map
